/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.angryelectron.xbmq;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.log4j.AppenderSkeleton;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.LoggingEvent;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

/**
 *
 * @author abythell
 */
public class XbmqAppender extends AppenderSkeleton {

    private final Xbmq xbmq;
    private final String logTopic;
    
    public XbmqAppender(Xbmq xbmq) {
        this.xbmq = xbmq;
        this.logTopic = xbmq.getTopics().log();
    }
    
    @Override
    protected void append(LoggingEvent event) {
        if (event.getMessage() == null) {
            /* nothing to log */
            return;
        }
        
        if (event.getLoggerName().equals(this.getClass().getCanonicalName())) {
            /* don't handle log messages generated by this class to avoid
             * vicious loops.
            */
            return;
        }
        
        /* format the message */
        Date timeStamp = new Date(event.timeStamp);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");                
        StringBuilder builder = new StringBuilder();
        builder.append(dateFormat.format(timeStamp));
        builder.append(" - ");
        builder.append(event.getLevel().toString());
        builder.append(": ");
        builder.append(event.getMessage().toString());
        
        MqttMessage logMessage = new MqttMessage(builder.toString().getBytes());
        logMessage.setRetained(true);
        try {
            xbmq.publishMqtt(logTopic, logMessage);
        } catch (MqttException ex) {
            Logger.getLogger(this.getClass()).log(Level.ERROR, ex);
        }
    }

    @Override
    public void close() {
        //nothing to do
    }

    @Override
    public boolean requiresLayout() {
        return false;
    }
    
}
