/*
 * Xbmq - XBee / MQTT Gateway 
 * Copyright 2015 Andrew Bythell, <abythell@ieee.org>
 */
package com.angryelectron.xbmq.message;

import com.angryelectron.xbmq.Xbmq;
import com.angryelectron.xbmq.XbmqTopic;
import com.angryelectron.xbmq.XbmqTopic.Topic;
import com.digi.xbee.api.RemoteXBeeDevice;
import com.digi.xbee.api.exceptions.XBeeException;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

/**
 * Build and transmit a data packet to a remote XBee device from an incoming
 * Mqtt message.
 *
 */
public class XBeeDataMessage implements XBeeMessage {

    private final Xbmq xbmq;

    /**
     * Constructor.
     * @param xbmq 
     */
    public XBeeDataMessage(Xbmq xbmq) {
        this.xbmq = xbmq;
    }

    /**
     * Check if the specified topic can be handled by XBeeDataMessage.
     *
     * @param topic The topic to check.
     * @return True if the message can be handled.
     */
    @Override
    public boolean subscribesTo(String topic) {
        return XbmqTopic.matches(Topic.DATASUBTOPIC, topic);
    }

    /**
     * Send a data packet to an XBee device.
     *
     * @param rxd
     * @param message message
     * @throws XBeeException if the data cannot be sent.
     */
    @Override
    public void transmit(RemoteXBeeDevice rxd, MqttMessage message) throws XBeeException {
        if (message.getPayload().length > 0) {
            xbmq.getXBee().sendData(rxd, message.getPayload());
        }
    }

    /**
     * Publish Mqtt message.  Does nothing.  Responses generated by data messages
     * are received and published by {@link com.angryelectron.xbmq.listener.XbmqDataReceiveListener}.
     * @throws MqttException if message cannot be published.
     */
    @Override
    public void publish() throws MqttException {
        /**
         * Any response will be published by XbmqDataReceiveListener.
         */
    }
}
